<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1434572498327">{:repl-history {:ide [], :local [&quot;(print m)&quot; &quot;(f m)&quot; &quot;(require 'minesweeper-kata)&quot; &quot;(m)&quot; &quot;m&quot; &quot;(in-ns 'minesweeper-kata.core)&quot; &quot;(foo \&quot;asdf\&quot;)&quot; &quot;(fname1 \&quot;asdF\&quot;)&quot; &quot;(in-ns minesweeper-kata.core)&quot; &quot;(read-file \&quot;asdf\&quot;)&quot; &quot;(map \&quot;qwe\&quot; (fn [x] (println x)))&quot; &quot;(rest [1 2 3])&quot; &quot;(require 'clojure.string)&quot; &quot;(split \&quot;as\&quot;)&quot; &quot;(string$split\n  \&quot;as\&quot;)&quot; &quot;(use 'clojure.string)&quot; &quot;(require '[clojure.string :as str])&quot; &quot;(str/split \&quot;asdf\&quot;)&quot; &quot;(str/split \&quot;asdf\&quot; \&quot;\&quot;)&quot; &quot;(str/split \&quot;asdf\&quot; #\&quot;\&quot;)&quot; &quot;(str/split \&quot;asdf\&quot; #\&quot;*\&quot;)&quot; &quot;(str/split \&quot;asdf\&quot; #\&quot;.*\&quot;)&quot; &quot;(str/split \&quot;asdf\&quot; #\&quot;\\s\&quot;)&quot; &quot;(rest (str/split \&quot;asdf\&quot; #\&quot;\&quot;)\n      )&quot; &quot;(in-ns 'minesweeper-kata)&quot; &quot;(rea)&quot; &quot;(read-file \&quot;field-in\&quot;)&quot; &quot;(reduce (fn [a b] (println a b)) [1 2 3])&quot; &quot;((reduce (fn [x y] x) [1 2 3]))&quot; &quot;(reduce conj [] [1 2 3])&quot; &quot;(clojure.core/reduce conj [] [1 2 3])&quot; &quot;(clojure.core/reduce clojure.core/\n                         conj [] [1 2 3])&quot; &quot;(clojure.core/reduce clojure.core/conj [] [1 2 3])&quot; &quot;(testx)&quot; &quot;(clojure.string/split \&quot;asdf\&quot; #\&quot;\&quot;)&quot; &quot;(rest (clojure.string/split \&quot;asdf\&quot; #\&quot;\&quot;))&quot; &quot;(clojure.core/rest (clojure.string/split \&quot;asdf\&quot; #\&quot;\&quot;))&quot; &quot;[(clojure.core/rest (clojure.string/split \&quot;asdf\&quot; #\&quot;\&quot;))]&quot; &quot;(get-in [0 0] [(clojure.core/rest (clojure.string/split \&quot;asdf\&quot; #\&quot;\&quot;))])&quot; &quot;(require 'clojre.core)&quot; &quot;(use 'clojre.core)&quot; &quot;(use clojre.core)&quot; &quot;(use 'clojure.core)&quot; &quot;(reqire 'clojure.core)&quot; &quot;(require 'clojure.core)&quot;], :remote []}}</component>
</project>